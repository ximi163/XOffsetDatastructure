// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTER_FLATBUFFERS_TEST_H_
#define FLATBUFFERS_GENERATED_CHARACTER_FLATBUFFERS_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace flatbuffers_test {

struct Skill;

struct Item;

struct ItemsEntry;

struct Equip;
struct EquipBuilder;

struct Position;

struct Character;
struct CharacterBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Skill FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t id_;
  uint32_t level_;

 public:
  Skill()
      : id_(0),
        level_(0) {
  }
  Skill(uint32_t _id, uint32_t _level)
      : id_(::flatbuffers::EndianScalar(_id)),
        level_(::flatbuffers::EndianScalar(_level)) {
  }
  uint32_t id() const {
    return ::flatbuffers::EndianScalar(id_);
  }
  uint32_t level() const {
    return ::flatbuffers::EndianScalar(level_);
  }
};
FLATBUFFERS_STRUCT_END(Skill, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Item FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t id_;
  int32_t padding0__;
  uint64_t uuid_;
  uint32_t number_;
  int32_t padding1__;
  uint64_t timestamp_;

 public:
  Item()
      : id_(0),
        padding0__(0),
        uuid_(0),
        number_(0),
        padding1__(0),
        timestamp_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  Item(uint32_t _id, uint64_t _uuid, uint32_t _number, uint64_t _timestamp)
      : id_(::flatbuffers::EndianScalar(_id)),
        padding0__(0),
        uuid_(::flatbuffers::EndianScalar(_uuid)),
        number_(::flatbuffers::EndianScalar(_number)),
        padding1__(0),
        timestamp_(::flatbuffers::EndianScalar(_timestamp)) {
    (void)padding0__;
    (void)padding1__;
  }
  uint32_t id() const {
    return ::flatbuffers::EndianScalar(id_);
  }
  uint64_t uuid() const {
    return ::flatbuffers::EndianScalar(uuid_);
  }
  uint32_t number() const {
    return ::flatbuffers::EndianScalar(number_);
  }
  uint64_t timestamp() const {
    return ::flatbuffers::EndianScalar(timestamp_);
  }
};
FLATBUFFERS_STRUCT_END(Item, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ItemsEntry FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t key_;
  flatbuffers_test::Item value_;

 public:
  ItemsEntry()
      : key_(0),
        value_() {
  }
  ItemsEntry(uint64_t _key, const flatbuffers_test::Item &_value)
      : key_(::flatbuffers::EndianScalar(_key)),
        value_(_value) {
  }
  uint64_t key() const {
    return ::flatbuffers::EndianScalar(key_);
  }
  const flatbuffers_test::Item &value() const {
    return value_;
  }
};
FLATBUFFERS_STRUCT_END(ItemsEntry, 40);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Position FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Position()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Position(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Position, 12);

struct Equip FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EquipBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_UUID = 6,
    VT_NUMBER = 8,
    VT_TIMESTAMP = 10,
    VT_LEVEL = 12,
    VT_ATTRIBUTES = 14
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint64_t uuid() const {
    return GetField<uint64_t>(VT_UUID, 0);
  }
  uint32_t number() const {
    return GetField<uint32_t>(VT_NUMBER, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  const ::flatbuffers::Vector<float> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ATTRIBUTES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_UUID, 8) &&
           VerifyField<uint32_t>(verifier, VT_NUMBER, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           verifier.EndTable();
  }
};

struct EquipBuilder {
  typedef Equip Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Equip::VT_ID, id, 0);
  }
  void add_uuid(uint64_t uuid) {
    fbb_.AddElement<uint64_t>(Equip::VT_UUID, uuid, 0);
  }
  void add_number(uint32_t number) {
    fbb_.AddElement<uint32_t>(Equip::VT_NUMBER, number, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(Equip::VT_TIMESTAMP, timestamp, 0);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(Equip::VT_LEVEL, level, 0);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<float>> attributes) {
    fbb_.AddOffset(Equip::VT_ATTRIBUTES, attributes);
  }
  explicit EquipBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Equip> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Equip>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Equip> CreateEquip(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint64_t uuid = 0,
    uint32_t number = 0,
    uint64_t timestamp = 0,
    uint32_t level = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> attributes = 0) {
  EquipBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_uuid(uuid);
  builder_.add_attributes(attributes);
  builder_.add_level(level);
  builder_.add_number(number);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Equip> CreateEquipDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint64_t uuid = 0,
    uint32_t number = 0,
    uint64_t timestamp = 0,
    uint32_t level = 0,
    const std::vector<float> *attributes = nullptr) {
  auto attributes__ = attributes ? _fbb.CreateVector<float>(*attributes) : 0;
  return flatbuffers_test::CreateEquip(
      _fbb,
      id,
      uuid,
      number,
      timestamp,
      level,
      attributes__);
}

struct Character FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CharacterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_LEVEL = 8,
    VT_HEALTHPOINT = 10,
    VT_MANAPOINT = 12,
    VT_SPEED = 14,
    VT_POS = 16,
    VT_PATH = 18,
    VT_ATTRIBUTES = 20,
    VT_ITEMS = 22,
    VT_EQUIPS = 24,
    VT_SKILLS = 26
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  float healthpoint() const {
    return GetField<float>(VT_HEALTHPOINT, 0.0f);
  }
  float manapoint() const {
    return GetField<float>(VT_MANAPOINT, 0.0f);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  const flatbuffers_test::Position *pos() const {
    return GetStruct<const flatbuffers_test::Position *>(VT_POS);
  }
  const ::flatbuffers::Vector<const flatbuffers_test::Position *> *path() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffers_test::Position *> *>(VT_PATH);
  }
  const ::flatbuffers::Vector<float> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ATTRIBUTES);
  }
  const ::flatbuffers::Vector<const flatbuffers_test::ItemsEntry *> *items() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffers_test::ItemsEntry *> *>(VT_ITEMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers_test::Equip>> *equips() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers_test::Equip>> *>(VT_EQUIPS);
  }
  const ::flatbuffers::Vector<const flatbuffers_test::Skill *> *skills() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffers_test::Skill *> *>(VT_SKILLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<float>(verifier, VT_HEALTHPOINT, 4) &&
           VerifyField<float>(verifier, VT_MANAPOINT, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           VerifyField<flatbuffers_test::Position>(verifier, VT_POS, 4) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyVector(path()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           VerifyOffset(verifier, VT_EQUIPS) &&
           verifier.VerifyVector(equips()) &&
           verifier.VerifyVectorOfTables(equips()) &&
           VerifyOffset(verifier, VT_SKILLS) &&
           verifier.VerifyVector(skills()) &&
           verifier.EndTable();
  }
};

struct CharacterBuilder {
  typedef Character Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Character::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Character::VT_NAME, name);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(Character::VT_LEVEL, level, 0);
  }
  void add_healthpoint(float healthpoint) {
    fbb_.AddElement<float>(Character::VT_HEALTHPOINT, healthpoint, 0.0f);
  }
  void add_manapoint(float manapoint) {
    fbb_.AddElement<float>(Character::VT_MANAPOINT, manapoint, 0.0f);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(Character::VT_SPEED, speed, 0.0f);
  }
  void add_pos(const flatbuffers_test::Position *pos) {
    fbb_.AddStruct(Character::VT_POS, pos);
  }
  void add_path(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::Position *>> path) {
    fbb_.AddOffset(Character::VT_PATH, path);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<float>> attributes) {
    fbb_.AddOffset(Character::VT_ATTRIBUTES, attributes);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::ItemsEntry *>> items) {
    fbb_.AddOffset(Character::VT_ITEMS, items);
  }
  void add_equips(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers_test::Equip>>> equips) {
    fbb_.AddOffset(Character::VT_EQUIPS, equips);
  }
  void add_skills(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::Skill *>> skills) {
    fbb_.AddOffset(Character::VT_SKILLS, skills);
  }
  explicit CharacterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Character> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Character>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Character> CreateCharacter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t level = 0,
    float healthpoint = 0.0f,
    float manapoint = 0.0f,
    float speed = 0.0f,
    const flatbuffers_test::Position *pos = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::Position *>> path = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> attributes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::ItemsEntry *>> items = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers_test::Equip>>> equips = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers_test::Skill *>> skills = 0) {
  CharacterBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_skills(skills);
  builder_.add_equips(equips);
  builder_.add_items(items);
  builder_.add_attributes(attributes);
  builder_.add_path(path);
  builder_.add_pos(pos);
  builder_.add_speed(speed);
  builder_.add_manapoint(manapoint);
  builder_.add_healthpoint(healthpoint);
  builder_.add_level(level);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Character> CreateCharacterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const char *name = nullptr,
    uint32_t level = 0,
    float healthpoint = 0.0f,
    float manapoint = 0.0f,
    float speed = 0.0f,
    const flatbuffers_test::Position *pos = nullptr,
    const std::vector<flatbuffers_test::Position> *path = nullptr,
    const std::vector<float> *attributes = nullptr,
    const std::vector<flatbuffers_test::ItemsEntry> *items = nullptr,
    const std::vector<::flatbuffers::Offset<flatbuffers_test::Equip>> *equips = nullptr,
    const std::vector<flatbuffers_test::Skill> *skills = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto path__ = path ? _fbb.CreateVectorOfStructs<flatbuffers_test::Position>(*path) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<float>(*attributes) : 0;
  auto items__ = items ? _fbb.CreateVectorOfStructs<flatbuffers_test::ItemsEntry>(*items) : 0;
  auto equips__ = equips ? _fbb.CreateVector<::flatbuffers::Offset<flatbuffers_test::Equip>>(*equips) : 0;
  auto skills__ = skills ? _fbb.CreateVectorOfStructs<flatbuffers_test::Skill>(*skills) : 0;
  return flatbuffers_test::CreateCharacter(
      _fbb,
      id,
      name__,
      level,
      healthpoint,
      manapoint,
      speed,
      pos,
      path__,
      attributes__,
      items__,
      equips__,
      skills__);
}

inline const flatbuffers_test::Character *GetCharacter(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers_test::Character>(buf);
}

inline const flatbuffers_test::Character *GetSizePrefixedCharacter(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers_test::Character>(buf);
}

inline bool VerifyCharacterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers_test::Character>(nullptr);
}

inline bool VerifySizePrefixedCharacterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers_test::Character>(nullptr);
}

inline void FinishCharacterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers_test::Character> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCharacterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers_test::Character> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuffers_test

#endif  // FLATBUFFERS_GENERATED_CHARACTER_FLATBUFFERS_TEST_H_
